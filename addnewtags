#!/usr/bin/env python
##############################################################################
#
# This file is part of LImA, a Library for Image Acquisition
#
# Copyright (C) : 2009-2011
# European Synchrotron Radiation Facility
# BP 220, Grenoble 38043
# FRANCE
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
############################################################################


import os, sys

base_path = os.path.dirname(sys.argv[0])
if base_path == '.':
    base_path = os.getcwd()

def usage():
    prgname = os.path.basename(sys.argv[0])
    print "Usage: %s <change_type | print> <all | module ...>" % prgname
    print ""
    print "   change_type: major | minor | release"
    print ""
    sys.exit(1)

CHG_MAJOR, CHG_MINOR, CHG_RELEASE = 'major', 'minor', 'release'
JUST_PRINT = 'print'

ALL = 'all'

class Version:

    RePat = '[0-9]+(\\.[0-9]+(\\.[0-9]+)?)?'

    def __init__(self, major=1, minor=None, rel=None, fromstr=None):
        if fromstr:
            x = map(int, fromstr.split('.'))
            major = x[0]
            minor = rel = None
            try:
                minor = x[1]
                rel   = x[2]
            except:
                pass

        self.major = major
        self.minor = minor
        self.rel = rel

    def __str__(self):
        s = '%d' % self.major
        if self.minor is not None:
            s += '.%d' % (self.minor)
        if self.rel is not None:
            s += '.%d' % (self.rel)
        return s
    
    def __repr__(self):
        return str(self)
    
    def __cmp__(self, other):
        if not isinstance(other, Version):
            other = Version(fromstr=repr(other))
        return cmp(hash(self), hash(other))

    def __hash__(self):
        return (self.major << 16) + ((self.minor or 0) << 8) + (self.rel or 0)
    


try:
    change_type = sys.argv[1]
    if change_type not in [CHG_MAJOR, CHG_MINOR, CHG_RELEASE, JUST_PRINT]:
        raise InvalidValue

    modules = sys.argv[2:]
    if not modules:
        raise InvalidValue
except:
    usage()

mod_version_data = {
    'core': 'common/VERSION',
    'espia': 'camera/common/espia/VERSION',
    'frelon': 'camera/frelon/VERSION',
    'maxipix': 'camera/maxipix/VERSION',
    'pilatus': 'camera/pilatus/VERSION',
    'basler': 'camera/basler/VERSION',
    'prosilica': 'camera/prosilica/VERSION',
    'andor': 'camera/andor/VERSION',
    'perkinelmer': 'camera/perkinelmer/VERSION',    
    'xpad': 'camera/xpad/VERSION',
    'pco': 'camera/pco/VERSION',
    'ueye': 'camera/ueye/VERSION',
    'simulator': 'camera/simulator/VERSION',
    'taco/camera/frelon': 'applications/taco/VERSION',
    'tango/common': 'applications/tango/VERSION',
    'tango/camera/maxipix': 'applications/tango/camera/Maxipix_VERSION',
    'tango/camera/pilatus': 'applications/tango/camera/Pilatus_VERSION',
    'tango/camera/frelon': 'applications/tango/camera/Frelon_VERSION',
    'tango/camera/basler': 'applications/tango/camera/Basler_VERSION',
    'tango/camera/prosilica': 'applications/tango/camera/Prosilica_VERSION',
    'tango/camera/andor': 'applications/tango/camera/Andor_VERSION',
    'tango/camera/perkinelmer': 'applications/tango/camera/PerkinElmer_VERSION',
    'tango/camera/xpad': 'applications/tango/camera/Xpad_VERSION',
    'tango/camera/pco': 'applications/tango/camera/Pco_VERSION',                
    'tango/camera/ueye': 'applications/tango/camera/Ueye_VERSION',                
    'tango/camera/simulator': 'applications/tango/camera/Simulator_VERSION',                
}

if modules == [ALL]:
    modules = mod_version_data.keys()

max_name_len = 0
for mod in modules:
    max_name_len = max(max_name_len, len(mod))

mod_version_objs = {}
for mod in modules:
    version_file_name = os.path.join(base_path, mod_version_data[mod])
    version_file = open(version_file_name, "rt")
    version_str = version_file.readlines()[0].strip()
    version_file.close()
    version = Version(fromstr=version_str)
    mod_version_objs[mod] = version
    print "Found %-*s version: %s" % (max_name_len, mod, version)

if change_type == JUST_PRINT:
    sys.exit(0)

submodules = []

for mod in modules:
    version = mod_version_objs[mod]
    if change_type == CHG_MAJOR:
        version.major += 1
        version.minor  = 0
        version.rel    = 0
    elif change_type == CHG_MINOR:
        version.minor += 1
        version.rel    = 0
    elif change_type == CHG_RELEASE:
        version.rel   += 1
    print "New %-*s version: %s" % (max_name_len, mod, version)
    version_file_name = os.path.join(base_path, mod_version_data[mod])
    version_file = open(version_file_name, 'wt')
    version_str = version_file.write('%s\n' % version)
    version_file.close()


    if os.system('git add %s 2>/dev/null' % version_file_name): # probably a submodule
        basepath,filename = os.path.split(version_file_name)
        oldDir = os.getcwd()
        os.chdir(basepath)
        os.system('git add %s' % filename) # add in submodule
        os.system('git commit -m "New tag : %s"' % version)
        os.chdir(oldDir)
        while basepath and os.system('git add %s 2>/dev/null' % basepath):
		basepath,_ = os.path.split(basepath)

        submodules.append(mod)

if os.system('git commit') :
    sys.exit(0)


for mod in modules:
    version = mod_version_objs[mod]
    git_tag = os.path.join(mod, '%s' % version)
    git_tag = git_tag.replace(os.sep,'-')
    print "Creating git tag: %s" % git_tag
    
    cmd = 'git tag %s' % (git_tag)
    os.system(cmd)

if submodules:
    print 'Don\'t forget to push those submodules:'
    for mod in submodules:
        print '\t->',mod
